#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TEAM4OIES
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TEAM4OIES")]
	public partial class UC9DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTestimonial(Testimonial instance);
    partial void UpdateTestimonial(Testimonial instance);
    partial void DeleteTestimonial(Testimonial instance);
    partial void InsertAudit(Audit instance);
    partial void UpdateAudit(Audit instance);
    partial void DeleteAudit(Audit instance);
    partial void InsertBrand(Brand instance);
    partial void UpdateBrand(Brand instance);
    partial void DeleteBrand(Brand instance);
    partial void InsertEndograft(Endograft instance);
    partial void UpdateEndograft(Endograft instance);
    partial void DeleteEndograft(Endograft instance);
    partial void InsertInstitution(Institution instance);
    partial void UpdateInstitution(Institution instance);
    partial void DeleteInstitution(Institution instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertSeries(Series instance);
    partial void UpdateSeries(Series instance);
    partial void DeleteSeries(Series instance);
    partial void InsertSlice(Slice instance);
    partial void UpdateSlice(Slice instance);
    partial void DeleteSlice(Slice instance);
    partial void InsertStudy(Study instance);
    partial void UpdateStudy(Study instance);
    partial void DeleteStudy(Study instance);
    partial void InsertSurgeon(Surgeon instance);
    partial void UpdateSurgeon(Surgeon instance);
    partial void DeleteSurgeon(Surgeon instance);
    #endregion
		
		public UC9DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TEAM4OIESConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UC9DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UC9DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UC9DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UC9DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Testimonial> Testimonials
		{
			get
			{
				return this.GetTable<Testimonial>();
			}
		}
		
		public System.Data.Linq.Table<Audit> Audits
		{
			get
			{
				return this.GetTable<Audit>();
			}
		}
		
		public System.Data.Linq.Table<Brand> Brands
		{
			get
			{
				return this.GetTable<Brand>();
			}
		}
		
		public System.Data.Linq.Table<Endograft> Endografts
		{
			get
			{
				return this.GetTable<Endograft>();
			}
		}
		
		public System.Data.Linq.Table<Institution> Institutions
		{
			get
			{
				return this.GetTable<Institution>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Series> Series
		{
			get
			{
				return this.GetTable<Series>();
			}
		}
		
		public System.Data.Linq.Table<Slice> Slices
		{
			get
			{
				return this.GetTable<Slice>();
			}
		}
		
		public System.Data.Linq.Table<Study> Studies
		{
			get
			{
				return this.GetTable<Study>();
			}
		}
		
		public System.Data.Linq.Table<Surgeon> Surgeons
		{
			get
			{
				return this.GetTable<Surgeon>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TEAM4OIES.Testimonial")]
	public partial class Testimonial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestimonialID;
		
		private string _content;
		
		private System.DateTime _tDate;
		
		private int _surgeonID;
		
		private EntityRef<Surgeon> _Surgeon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestimonialIDChanging(int value);
    partial void OnTestimonialIDChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void OntDateChanging(System.DateTime value);
    partial void OntDateChanged();
    partial void OnsurgeonIDChanging(int value);
    partial void OnsurgeonIDChanged();
    #endregion
		
		public Testimonial()
		{
			this._Surgeon = default(EntityRef<Surgeon>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestimonialID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestimonialID
		{
			get
			{
				return this._TestimonialID;
			}
			set
			{
				if ((this._TestimonialID != value))
				{
					this.OnTestimonialIDChanging(value);
					this.SendPropertyChanging();
					this._TestimonialID = value;
					this.SendPropertyChanged("TestimonialID");
					this.OnTestimonialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tDate", DbType="DateTime NOT NULL")]
		public System.DateTime tDate
		{
			get
			{
				return this._tDate;
			}
			set
			{
				if ((this._tDate != value))
				{
					this.OntDateChanging(value);
					this.SendPropertyChanging();
					this._tDate = value;
					this.SendPropertyChanged("tDate");
					this.OntDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surgeonID", DbType="Int NOT NULL")]
		public int surgeonID
		{
			get
			{
				return this._surgeonID;
			}
			set
			{
				if ((this._surgeonID != value))
				{
					if (this._Surgeon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsurgeonIDChanging(value);
					this.SendPropertyChanging();
					this._surgeonID = value;
					this.SendPropertyChanged("surgeonID");
					this.OnsurgeonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Surgeon_Testimonial", Storage="_Surgeon", ThisKey="surgeonID", OtherKey="surgeonID", IsForeignKey=true)]
		public Surgeon Surgeon
		{
			get
			{
				return this._Surgeon.Entity;
			}
			set
			{
				Surgeon previousValue = this._Surgeon.Entity;
				if (((previousValue != value) 
							|| (this._Surgeon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Surgeon.Entity = null;
						previousValue.Testimonials.Remove(this);
					}
					this._Surgeon.Entity = value;
					if ((value != null))
					{
						value.Testimonials.Add(this);
						this._surgeonID = value.surgeonID;
					}
					else
					{
						this._surgeonID = default(int);
					}
					this.SendPropertyChanged("Surgeon");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TEAM4OIES.Audit")]
	public partial class Audit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _audit_id;
		
		private int _UserID;
		
		private string _username;
		
		private System.DateTime _date;
		
		private string _table_;
		
		private string _attribute;
		
		private string _access;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onaudit_idChanging(int value);
    partial void Onaudit_idChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void Ontable_Changing(string value);
    partial void Ontable_Changed();
    partial void OnattributeChanging(string value);
    partial void OnattributeChanged();
    partial void OnaccessChanging(string value);
    partial void OnaccessChanged();
    #endregion
		
		public Audit()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_audit_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int audit_id
		{
			get
			{
				return this._audit_id;
			}
			set
			{
				if ((this._audit_id != value))
				{
					this.Onaudit_idChanging(value);
					this.SendPropertyChanging();
					this._audit_id = value;
					this.SendPropertyChanged("audit_id");
					this.Onaudit_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_table_", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string table_
		{
			get
			{
				return this._table_;
			}
			set
			{
				if ((this._table_ != value))
				{
					this.Ontable_Changing(value);
					this.SendPropertyChanging();
					this._table_ = value;
					this.SendPropertyChanged("table_");
					this.Ontable_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attribute", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string attribute
		{
			get
			{
				return this._attribute;
			}
			set
			{
				if ((this._attribute != value))
				{
					this.OnattributeChanging(value);
					this.SendPropertyChanging();
					this._attribute = value;
					this.SendPropertyChanged("attribute");
					this.OnattributeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_access", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string access
		{
			get
			{
				return this._access;
			}
			set
			{
				if ((this._access != value))
				{
					this.OnaccessChanging(value);
					this.SendPropertyChanging();
					this._access = value;
					this.SendPropertyChanged("access");
					this.OnaccessChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TEAM4OIES.Brand")]
	public partial class Brand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _brand_id;
		
		private string _brand1;
		
		private EntitySet<Endograft> _Endografts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onbrand_idChanging(int value);
    partial void Onbrand_idChanged();
    partial void Onbrand1Changing(string value);
    partial void Onbrand1Changed();
    #endregion
		
		public Brand()
		{
			this._Endografts = new EntitySet<Endograft>(new Action<Endograft>(this.attach_Endografts), new Action<Endograft>(this.detach_Endografts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brand_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int brand_id
		{
			get
			{
				return this._brand_id;
			}
			set
			{
				if ((this._brand_id != value))
				{
					this.Onbrand_idChanging(value);
					this.SendPropertyChanging();
					this._brand_id = value;
					this.SendPropertyChanged("brand_id");
					this.Onbrand_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="brand", Storage="_brand1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string brand1
		{
			get
			{
				return this._brand1;
			}
			set
			{
				if ((this._brand1 != value))
				{
					this.Onbrand1Changing(value);
					this.SendPropertyChanging();
					this._brand1 = value;
					this.SendPropertyChanged("brand1");
					this.Onbrand1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brand_Endograft", Storage="_Endografts", ThisKey="brand_id", OtherKey="brand_id")]
		public EntitySet<Endograft> Endografts
		{
			get
			{
				return this._Endografts;
			}
			set
			{
				this._Endografts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Endografts(Endograft entity)
		{
			this.SendPropertyChanging();
			entity.Brand = this;
		}
		
		private void detach_Endografts(Endograft entity)
		{
			this.SendPropertyChanging();
			entity.Brand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TEAM4OIES.Endograft")]
	public partial class Endograft : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _endograft_id;
		
		private System.DateTime _dateOfSurgery;
		
		private double _diameter;
		
		private double _length;
		
		private double _unilateralLegDiameter;
		
		private double _unilateralLegLength;
		
		private double _controlaterLegDiameter;
		
		private double _controlaterLegLength;
		
		private double _entryPoint;
		
		private int _brand_id;
		
		private EntitySet<Patient> _Patients;
		
		private EntityRef<Brand> _Brand;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onendograft_idChanging(int value);
    partial void Onendograft_idChanged();
    partial void OndateOfSurgeryChanging(System.DateTime value);
    partial void OndateOfSurgeryChanged();
    partial void OndiameterChanging(double value);
    partial void OndiameterChanged();
    partial void OnlengthChanging(double value);
    partial void OnlengthChanged();
    partial void OnunilateralLegDiameterChanging(double value);
    partial void OnunilateralLegDiameterChanged();
    partial void OnunilateralLegLengthChanging(double value);
    partial void OnunilateralLegLengthChanged();
    partial void OncontrolaterLegDiameterChanging(double value);
    partial void OncontrolaterLegDiameterChanged();
    partial void OncontrolaterLegLengthChanging(double value);
    partial void OncontrolaterLegLengthChanged();
    partial void OnentryPointChanging(double value);
    partial void OnentryPointChanged();
    partial void Onbrand_idChanging(int value);
    partial void Onbrand_idChanged();
    #endregion
		
		public Endograft()
		{
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._Brand = default(EntityRef<Brand>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endograft_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int endograft_id
		{
			get
			{
				return this._endograft_id;
			}
			set
			{
				if ((this._endograft_id != value))
				{
					this.Onendograft_idChanging(value);
					this.SendPropertyChanging();
					this._endograft_id = value;
					this.SendPropertyChanged("endograft_id");
					this.Onendograft_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfSurgery", DbType="DateTime NOT NULL")]
		public System.DateTime dateOfSurgery
		{
			get
			{
				return this._dateOfSurgery;
			}
			set
			{
				if ((this._dateOfSurgery != value))
				{
					this.OndateOfSurgeryChanging(value);
					this.SendPropertyChanging();
					this._dateOfSurgery = value;
					this.SendPropertyChanged("dateOfSurgery");
					this.OndateOfSurgeryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diameter", DbType="Float NOT NULL")]
		public double diameter
		{
			get
			{
				return this._diameter;
			}
			set
			{
				if ((this._diameter != value))
				{
					this.OndiameterChanging(value);
					this.SendPropertyChanging();
					this._diameter = value;
					this.SendPropertyChanged("diameter");
					this.OndiameterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_length", DbType="Float NOT NULL")]
		public double length
		{
			get
			{
				return this._length;
			}
			set
			{
				if ((this._length != value))
				{
					this.OnlengthChanging(value);
					this.SendPropertyChanging();
					this._length = value;
					this.SendPropertyChanged("length");
					this.OnlengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unilateralLegDiameter", DbType="Float NOT NULL")]
		public double unilateralLegDiameter
		{
			get
			{
				return this._unilateralLegDiameter;
			}
			set
			{
				if ((this._unilateralLegDiameter != value))
				{
					this.OnunilateralLegDiameterChanging(value);
					this.SendPropertyChanging();
					this._unilateralLegDiameter = value;
					this.SendPropertyChanged("unilateralLegDiameter");
					this.OnunilateralLegDiameterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unilateralLegLength", DbType="Float NOT NULL")]
		public double unilateralLegLength
		{
			get
			{
				return this._unilateralLegLength;
			}
			set
			{
				if ((this._unilateralLegLength != value))
				{
					this.OnunilateralLegLengthChanging(value);
					this.SendPropertyChanging();
					this._unilateralLegLength = value;
					this.SendPropertyChanged("unilateralLegLength");
					this.OnunilateralLegLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_controlaterLegDiameter", DbType="Float NOT NULL")]
		public double controlaterLegDiameter
		{
			get
			{
				return this._controlaterLegDiameter;
			}
			set
			{
				if ((this._controlaterLegDiameter != value))
				{
					this.OncontrolaterLegDiameterChanging(value);
					this.SendPropertyChanging();
					this._controlaterLegDiameter = value;
					this.SendPropertyChanged("controlaterLegDiameter");
					this.OncontrolaterLegDiameterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_controlaterLegLength", DbType="Float NOT NULL")]
		public double controlaterLegLength
		{
			get
			{
				return this._controlaterLegLength;
			}
			set
			{
				if ((this._controlaterLegLength != value))
				{
					this.OncontrolaterLegLengthChanging(value);
					this.SendPropertyChanging();
					this._controlaterLegLength = value;
					this.SendPropertyChanged("controlaterLegLength");
					this.OncontrolaterLegLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryPoint", DbType="Float NOT NULL")]
		public double entryPoint
		{
			get
			{
				return this._entryPoint;
			}
			set
			{
				if ((this._entryPoint != value))
				{
					this.OnentryPointChanging(value);
					this.SendPropertyChanging();
					this._entryPoint = value;
					this.SendPropertyChanged("entryPoint");
					this.OnentryPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brand_id", DbType="Int NOT NULL")]
		public int brand_id
		{
			get
			{
				return this._brand_id;
			}
			set
			{
				if ((this._brand_id != value))
				{
					if (this._Brand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbrand_idChanging(value);
					this.SendPropertyChanging();
					this._brand_id = value;
					this.SendPropertyChanged("brand_id");
					this.Onbrand_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Endograft_Patient", Storage="_Patients", ThisKey="endograft_id", OtherKey="endograft_id")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brand_Endograft", Storage="_Brand", ThisKey="brand_id", OtherKey="brand_id", IsForeignKey=true)]
		public Brand Brand
		{
			get
			{
				return this._Brand.Entity;
			}
			set
			{
				Brand previousValue = this._Brand.Entity;
				if (((previousValue != value) 
							|| (this._Brand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Brand.Entity = null;
						previousValue.Endografts.Remove(this);
					}
					this._Brand.Entity = value;
					if ((value != null))
					{
						value.Endografts.Add(this);
						this._brand_id = value.brand_id;
					}
					else
					{
						this._brand_id = default(int);
					}
					this.SendPropertyChanged("Brand");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Endograft = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Endograft = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TEAM4OIES.Institution")]
	public partial class Institution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _institution_id;
		
		private string _institution1;
		
		private EntitySet<Surgeon> _Surgeons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oninstitution_idChanging(int value);
    partial void Oninstitution_idChanged();
    partial void Oninstitution1Changing(string value);
    partial void Oninstitution1Changed();
    #endregion
		
		public Institution()
		{
			this._Surgeons = new EntitySet<Surgeon>(new Action<Surgeon>(this.attach_Surgeons), new Action<Surgeon>(this.detach_Surgeons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_institution_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int institution_id
		{
			get
			{
				return this._institution_id;
			}
			set
			{
				if ((this._institution_id != value))
				{
					this.Oninstitution_idChanging(value);
					this.SendPropertyChanging();
					this._institution_id = value;
					this.SendPropertyChanged("institution_id");
					this.Oninstitution_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="institution", Storage="_institution1", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string institution1
		{
			get
			{
				return this._institution1;
			}
			set
			{
				if ((this._institution1 != value))
				{
					this.Oninstitution1Changing(value);
					this.SendPropertyChanging();
					this._institution1 = value;
					this.SendPropertyChanged("institution1");
					this.Oninstitution1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Institution_Surgeon", Storage="_Surgeons", ThisKey="institution_id", OtherKey="institution_id")]
		public EntitySet<Surgeon> Surgeons
		{
			get
			{
				return this._Surgeons;
			}
			set
			{
				this._Surgeons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Surgeons(Surgeon entity)
		{
			this.SendPropertyChanging();
			entity.Institution = this;
		}
		
		private void detach_Surgeons(Surgeon entity)
		{
			this.SendPropertyChanging();
			entity.Institution = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TEAM4OIES.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _patient_id;
		
		private int _originalID;
		
		private string _sex;
		
		private int _age;
		
		private System.DateTime _entryDate;
		
		private System.Nullable<int> _surgeonID;
		
		private System.Nullable<int> _endograft_id;
		
		private EntitySet<Study> _Studies;
		
		private EntityRef<Endograft> _Endograft;
		
		private EntityRef<Surgeon> _Surgeon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpatient_idChanging(int value);
    partial void Onpatient_idChanged();
    partial void OnoriginalIDChanging(int value);
    partial void OnoriginalIDChanged();
    partial void OnsexChanging(string value);
    partial void OnsexChanged();
    partial void OnageChanging(int value);
    partial void OnageChanged();
    partial void OnentryDateChanging(System.DateTime value);
    partial void OnentryDateChanged();
    partial void OnsurgeonIDChanging(System.Nullable<int> value);
    partial void OnsurgeonIDChanged();
    partial void Onendograft_idChanging(System.Nullable<int> value);
    partial void Onendograft_idChanged();
    #endregion
		
		public Patient()
		{
			this._Studies = new EntitySet<Study>(new Action<Study>(this.attach_Studies), new Action<Study>(this.detach_Studies));
			this._Endograft = default(EntityRef<Endograft>);
			this._Surgeon = default(EntityRef<Surgeon>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patient_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int patient_id
		{
			get
			{
				return this._patient_id;
			}
			set
			{
				if ((this._patient_id != value))
				{
					this.Onpatient_idChanging(value);
					this.SendPropertyChanging();
					this._patient_id = value;
					this.SendPropertyChanged("patient_id");
					this.Onpatient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_originalID", DbType="Int NOT NULL")]
		public int originalID
		{
			get
			{
				return this._originalID;
			}
			set
			{
				if ((this._originalID != value))
				{
					this.OnoriginalIDChanging(value);
					this.SendPropertyChanging();
					this._originalID = value;
					this.SendPropertyChanged("originalID");
					this.OnoriginalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sex", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string sex
		{
			get
			{
				return this._sex;
			}
			set
			{
				if ((this._sex != value))
				{
					this.OnsexChanging(value);
					this.SendPropertyChanging();
					this._sex = value;
					this.SendPropertyChanged("sex");
					this.OnsexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_age", DbType="Int NOT NULL")]
		public int age
		{
			get
			{
				return this._age;
			}
			set
			{
				if ((this._age != value))
				{
					this.OnageChanging(value);
					this.SendPropertyChanging();
					this._age = value;
					this.SendPropertyChanged("age");
					this.OnageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryDate", DbType="DateTime NOT NULL")]
		public System.DateTime entryDate
		{
			get
			{
				return this._entryDate;
			}
			set
			{
				if ((this._entryDate != value))
				{
					this.OnentryDateChanging(value);
					this.SendPropertyChanging();
					this._entryDate = value;
					this.SendPropertyChanged("entryDate");
					this.OnentryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surgeonID", DbType="Int")]
		public System.Nullable<int> surgeonID
		{
			get
			{
				return this._surgeonID;
			}
			set
			{
				if ((this._surgeonID != value))
				{
					if (this._Surgeon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsurgeonIDChanging(value);
					this.SendPropertyChanging();
					this._surgeonID = value;
					this.SendPropertyChanged("surgeonID");
					this.OnsurgeonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endograft_id", DbType="Int")]
		public System.Nullable<int> endograft_id
		{
			get
			{
				return this._endograft_id;
			}
			set
			{
				if ((this._endograft_id != value))
				{
					if (this._Endograft.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onendograft_idChanging(value);
					this.SendPropertyChanging();
					this._endograft_id = value;
					this.SendPropertyChanged("endograft_id");
					this.Onendograft_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Study", Storage="_Studies", ThisKey="patient_id", OtherKey="patient_id")]
		public EntitySet<Study> Studies
		{
			get
			{
				return this._Studies;
			}
			set
			{
				this._Studies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Endograft_Patient", Storage="_Endograft", ThisKey="endograft_id", OtherKey="endograft_id", IsForeignKey=true)]
		public Endograft Endograft
		{
			get
			{
				return this._Endograft.Entity;
			}
			set
			{
				Endograft previousValue = this._Endograft.Entity;
				if (((previousValue != value) 
							|| (this._Endograft.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Endograft.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._Endograft.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._endograft_id = value.endograft_id;
					}
					else
					{
						this._endograft_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Endograft");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Surgeon_Patient", Storage="_Surgeon", ThisKey="surgeonID", OtherKey="surgeonID", IsForeignKey=true)]
		public Surgeon Surgeon
		{
			get
			{
				return this._Surgeon.Entity;
			}
			set
			{
				Surgeon previousValue = this._Surgeon.Entity;
				if (((previousValue != value) 
							|| (this._Surgeon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Surgeon.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._Surgeon.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._surgeonID = value.surgeonID;
					}
					else
					{
						this._surgeonID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Surgeon");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Studies(Study entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Studies(Study entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TEAM4OIES.Series")]
	public partial class Series : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _series_id;
		
		private int _originalSeriesID;
		
		private string _description;
		
		private System.DateTime _entryDate;
		
		private int _study_id;
		
		private EntitySet<Slice> _Slices;
		
		private EntityRef<Study> _Study;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onseries_idChanging(int value);
    partial void Onseries_idChanged();
    partial void OnoriginalSeriesIDChanging(int value);
    partial void OnoriginalSeriesIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnentryDateChanging(System.DateTime value);
    partial void OnentryDateChanged();
    partial void Onstudy_idChanging(int value);
    partial void Onstudy_idChanged();
    #endregion
		
		public Series()
		{
			this._Slices = new EntitySet<Slice>(new Action<Slice>(this.attach_Slices), new Action<Slice>(this.detach_Slices));
			this._Study = default(EntityRef<Study>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_series_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int series_id
		{
			get
			{
				return this._series_id;
			}
			set
			{
				if ((this._series_id != value))
				{
					this.Onseries_idChanging(value);
					this.SendPropertyChanging();
					this._series_id = value;
					this.SendPropertyChanged("series_id");
					this.Onseries_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_originalSeriesID", DbType="Int NOT NULL")]
		public int originalSeriesID
		{
			get
			{
				return this._originalSeriesID;
			}
			set
			{
				if ((this._originalSeriesID != value))
				{
					this.OnoriginalSeriesIDChanging(value);
					this.SendPropertyChanging();
					this._originalSeriesID = value;
					this.SendPropertyChanged("originalSeriesID");
					this.OnoriginalSeriesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryDate", DbType="DateTime NOT NULL")]
		public System.DateTime entryDate
		{
			get
			{
				return this._entryDate;
			}
			set
			{
				if ((this._entryDate != value))
				{
					this.OnentryDateChanging(value);
					this.SendPropertyChanging();
					this._entryDate = value;
					this.SendPropertyChanged("entryDate");
					this.OnentryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_study_id", DbType="Int NOT NULL")]
		public int study_id
		{
			get
			{
				return this._study_id;
			}
			set
			{
				if ((this._study_id != value))
				{
					if (this._Study.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstudy_idChanging(value);
					this.SendPropertyChanging();
					this._study_id = value;
					this.SendPropertyChanged("study_id");
					this.Onstudy_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Series_Slice", Storage="_Slices", ThisKey="series_id", OtherKey="series_id")]
		public EntitySet<Slice> Slices
		{
			get
			{
				return this._Slices;
			}
			set
			{
				this._Slices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Study_Series", Storage="_Study", ThisKey="study_id", OtherKey="study_id", IsForeignKey=true)]
		public Study Study
		{
			get
			{
				return this._Study.Entity;
			}
			set
			{
				Study previousValue = this._Study.Entity;
				if (((previousValue != value) 
							|| (this._Study.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Study.Entity = null;
						previousValue.Series.Remove(this);
					}
					this._Study.Entity = value;
					if ((value != null))
					{
						value.Series.Add(this);
						this._study_id = value.study_id;
					}
					else
					{
						this._study_id = default(int);
					}
					this.SendPropertyChanged("Study");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Slices(Slice entity)
		{
			this.SendPropertyChanging();
			entity.Series = this;
		}
		
		private void detach_Slices(Slice entity)
		{
			this.SendPropertyChanging();
			entity.Series = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TEAM4OIES.Slice")]
	public partial class Slice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _slice_id;
		
		private int _inOrder;
		
		private string _filename;
		
		private string _title;
		
		private double _width;
		
		private double _height;
		
		private double _resolution;
		
		private double _thickness;
		
		private int _coordinateOrigin;
		
		private double _bitsPerPixel;
		
		private double _displayRange;
		
		private string _fullMetaData;
		
		private System.DateTime _entryDate;
		
		private int _series_id;
		
		private EntityRef<Series> _Series;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onslice_idChanging(int value);
    partial void Onslice_idChanged();
    partial void OninOrderChanging(int value);
    partial void OninOrderChanged();
    partial void OnfilenameChanging(string value);
    partial void OnfilenameChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnwidthChanging(double value);
    partial void OnwidthChanged();
    partial void OnheightChanging(double value);
    partial void OnheightChanged();
    partial void OnresolutionChanging(double value);
    partial void OnresolutionChanged();
    partial void OnthicknessChanging(double value);
    partial void OnthicknessChanged();
    partial void OncoordinateOriginChanging(int value);
    partial void OncoordinateOriginChanged();
    partial void OnbitsPerPixelChanging(double value);
    partial void OnbitsPerPixelChanged();
    partial void OndisplayRangeChanging(double value);
    partial void OndisplayRangeChanged();
    partial void OnfullMetaDataChanging(string value);
    partial void OnfullMetaDataChanged();
    partial void OnentryDateChanging(System.DateTime value);
    partial void OnentryDateChanged();
    partial void Onseries_idChanging(int value);
    partial void Onseries_idChanged();
    #endregion
		
		public Slice()
		{
			this._Series = default(EntityRef<Series>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_slice_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int slice_id
		{
			get
			{
				return this._slice_id;
			}
			set
			{
				if ((this._slice_id != value))
				{
					this.Onslice_idChanging(value);
					this.SendPropertyChanging();
					this._slice_id = value;
					this.SendPropertyChanged("slice_id");
					this.Onslice_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inOrder", DbType="Int NOT NULL")]
		public int inOrder
		{
			get
			{
				return this._inOrder;
			}
			set
			{
				if ((this._inOrder != value))
				{
					this.OninOrderChanging(value);
					this.SendPropertyChanging();
					this._inOrder = value;
					this.SendPropertyChanged("inOrder");
					this.OninOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filename", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string filename
		{
			get
			{
				return this._filename;
			}
			set
			{
				if ((this._filename != value))
				{
					this.OnfilenameChanging(value);
					this.SendPropertyChanging();
					this._filename = value;
					this.SendPropertyChanged("filename");
					this.OnfilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_width", DbType="Float NOT NULL")]
		public double width
		{
			get
			{
				return this._width;
			}
			set
			{
				if ((this._width != value))
				{
					this.OnwidthChanging(value);
					this.SendPropertyChanging();
					this._width = value;
					this.SendPropertyChanged("width");
					this.OnwidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_height", DbType="Float NOT NULL")]
		public double height
		{
			get
			{
				return this._height;
			}
			set
			{
				if ((this._height != value))
				{
					this.OnheightChanging(value);
					this.SendPropertyChanging();
					this._height = value;
					this.SendPropertyChanged("height");
					this.OnheightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resolution", DbType="Float NOT NULL")]
		public double resolution
		{
			get
			{
				return this._resolution;
			}
			set
			{
				if ((this._resolution != value))
				{
					this.OnresolutionChanging(value);
					this.SendPropertyChanging();
					this._resolution = value;
					this.SendPropertyChanged("resolution");
					this.OnresolutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_thickness", DbType="Float NOT NULL")]
		public double thickness
		{
			get
			{
				return this._thickness;
			}
			set
			{
				if ((this._thickness != value))
				{
					this.OnthicknessChanging(value);
					this.SendPropertyChanging();
					this._thickness = value;
					this.SendPropertyChanged("thickness");
					this.OnthicknessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coordinateOrigin", DbType="Int NOT NULL")]
		public int coordinateOrigin
		{
			get
			{
				return this._coordinateOrigin;
			}
			set
			{
				if ((this._coordinateOrigin != value))
				{
					this.OncoordinateOriginChanging(value);
					this.SendPropertyChanging();
					this._coordinateOrigin = value;
					this.SendPropertyChanged("coordinateOrigin");
					this.OncoordinateOriginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bitsPerPixel", DbType="Float NOT NULL")]
		public double bitsPerPixel
		{
			get
			{
				return this._bitsPerPixel;
			}
			set
			{
				if ((this._bitsPerPixel != value))
				{
					this.OnbitsPerPixelChanging(value);
					this.SendPropertyChanging();
					this._bitsPerPixel = value;
					this.SendPropertyChanged("bitsPerPixel");
					this.OnbitsPerPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_displayRange", DbType="Float NOT NULL")]
		public double displayRange
		{
			get
			{
				return this._displayRange;
			}
			set
			{
				if ((this._displayRange != value))
				{
					this.OndisplayRangeChanging(value);
					this.SendPropertyChanging();
					this._displayRange = value;
					this.SendPropertyChanged("displayRange");
					this.OndisplayRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullMetaData", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string fullMetaData
		{
			get
			{
				return this._fullMetaData;
			}
			set
			{
				if ((this._fullMetaData != value))
				{
					this.OnfullMetaDataChanging(value);
					this.SendPropertyChanging();
					this._fullMetaData = value;
					this.SendPropertyChanged("fullMetaData");
					this.OnfullMetaDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryDate", DbType="DateTime NOT NULL")]
		public System.DateTime entryDate
		{
			get
			{
				return this._entryDate;
			}
			set
			{
				if ((this._entryDate != value))
				{
					this.OnentryDateChanging(value);
					this.SendPropertyChanging();
					this._entryDate = value;
					this.SendPropertyChanged("entryDate");
					this.OnentryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_series_id", DbType="Int NOT NULL")]
		public int series_id
		{
			get
			{
				return this._series_id;
			}
			set
			{
				if ((this._series_id != value))
				{
					if (this._Series.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onseries_idChanging(value);
					this.SendPropertyChanging();
					this._series_id = value;
					this.SendPropertyChanged("series_id");
					this.Onseries_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Series_Slice", Storage="_Series", ThisKey="series_id", OtherKey="series_id", IsForeignKey=true)]
		public Series Series
		{
			get
			{
				return this._Series.Entity;
			}
			set
			{
				Series previousValue = this._Series.Entity;
				if (((previousValue != value) 
							|| (this._Series.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Series.Entity = null;
						previousValue.Slices.Remove(this);
					}
					this._Series.Entity = value;
					if ((value != null))
					{
						value.Slices.Add(this);
						this._series_id = value.series_id;
					}
					else
					{
						this._series_id = default(int);
					}
					this.SendPropertyChanged("Series");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TEAM4OIES.Study")]
	public partial class Study : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _study_id;
		
		private int _originalID;
		
		private string _description;
		
		private string _modality;
		
		private System.DateTime _date;
		
		private int _time;
		
		private string _referringPhysician;
		
		private string _additionalPatientHistory;
		
		private int _patient_id;
		
		private EntitySet<Series> _Series;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstudy_idChanging(int value);
    partial void Onstudy_idChanged();
    partial void OnoriginalIDChanging(int value);
    partial void OnoriginalIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnmodalityChanging(string value);
    partial void OnmodalityChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OntimeChanging(int value);
    partial void OntimeChanged();
    partial void OnreferringPhysicianChanging(string value);
    partial void OnreferringPhysicianChanged();
    partial void OnadditionalPatientHistoryChanging(string value);
    partial void OnadditionalPatientHistoryChanged();
    partial void Onpatient_idChanging(int value);
    partial void Onpatient_idChanged();
    #endregion
		
		public Study()
		{
			this._Series = new EntitySet<Series>(new Action<Series>(this.attach_Series), new Action<Series>(this.detach_Series));
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_study_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int study_id
		{
			get
			{
				return this._study_id;
			}
			set
			{
				if ((this._study_id != value))
				{
					this.Onstudy_idChanging(value);
					this.SendPropertyChanging();
					this._study_id = value;
					this.SendPropertyChanged("study_id");
					this.Onstudy_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_originalID", DbType="Int NOT NULL")]
		public int originalID
		{
			get
			{
				return this._originalID;
			}
			set
			{
				if ((this._originalID != value))
				{
					this.OnoriginalIDChanging(value);
					this.SendPropertyChanging();
					this._originalID = value;
					this.SendPropertyChanged("originalID");
					this.OnoriginalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modality", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string modality
		{
			get
			{
				return this._modality;
			}
			set
			{
				if ((this._modality != value))
				{
					this.OnmodalityChanging(value);
					this.SendPropertyChanging();
					this._modality = value;
					this.SendPropertyChanged("modality");
					this.OnmodalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="Int NOT NULL")]
		public int time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_referringPhysician", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string referringPhysician
		{
			get
			{
				return this._referringPhysician;
			}
			set
			{
				if ((this._referringPhysician != value))
				{
					this.OnreferringPhysicianChanging(value);
					this.SendPropertyChanging();
					this._referringPhysician = value;
					this.SendPropertyChanged("referringPhysician");
					this.OnreferringPhysicianChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_additionalPatientHistory", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string additionalPatientHistory
		{
			get
			{
				return this._additionalPatientHistory;
			}
			set
			{
				if ((this._additionalPatientHistory != value))
				{
					this.OnadditionalPatientHistoryChanging(value);
					this.SendPropertyChanging();
					this._additionalPatientHistory = value;
					this.SendPropertyChanged("additionalPatientHistory");
					this.OnadditionalPatientHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patient_id", DbType="Int NOT NULL")]
		public int patient_id
		{
			get
			{
				return this._patient_id;
			}
			set
			{
				if ((this._patient_id != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpatient_idChanging(value);
					this.SendPropertyChanging();
					this._patient_id = value;
					this.SendPropertyChanged("patient_id");
					this.Onpatient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Study_Series", Storage="_Series", ThisKey="study_id", OtherKey="study_id")]
		public EntitySet<Series> Series
		{
			get
			{
				return this._Series;
			}
			set
			{
				this._Series.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Study", Storage="_Patient", ThisKey="patient_id", OtherKey="patient_id", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Studies.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Studies.Add(this);
						this._patient_id = value.patient_id;
					}
					else
					{
						this._patient_id = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Series(Series entity)
		{
			this.SendPropertyChanging();
			entity.Study = this;
		}
		
		private void detach_Series(Series entity)
		{
			this.SendPropertyChanging();
			entity.Study = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TEAM4OIES.Surgeon")]
	public partial class Surgeon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userType;
		
		private int _surgeonID;
		
		private string _firstName;
		
		private string _lastName;
		
		private string _username;
		
		private string _password;
		
		private string _email;
		
		private System.Nullable<int> _institution_id;
		
		private bool _online;
		
		private bool _active;
		
		private EntitySet<Testimonial> _Testimonials;
		
		private EntitySet<Patient> _Patients;
		
		private EntityRef<Institution> _Institution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserTypeChanging(int value);
    partial void OnuserTypeChanged();
    partial void OnsurgeonIDChanging(int value);
    partial void OnsurgeonIDChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Oninstitution_idChanging(System.Nullable<int> value);
    partial void Oninstitution_idChanged();
    partial void OnonlineChanging(bool value);
    partial void OnonlineChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public Surgeon()
		{
			this._Testimonials = new EntitySet<Testimonial>(new Action<Testimonial>(this.attach_Testimonials), new Action<Testimonial>(this.detach_Testimonials));
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._Institution = default(EntityRef<Institution>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userType", DbType="Int NOT NULL")]
		public int userType
		{
			get
			{
				return this._userType;
			}
			set
			{
				if ((this._userType != value))
				{
					this.OnuserTypeChanging(value);
					this.SendPropertyChanging();
					this._userType = value;
					this.SendPropertyChanged("userType");
					this.OnuserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surgeonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int surgeonID
		{
			get
			{
				return this._surgeonID;
			}
			set
			{
				if ((this._surgeonID != value))
				{
					this.OnsurgeonIDChanging(value);
					this.SendPropertyChanging();
					this._surgeonID = value;
					this.SendPropertyChanged("surgeonID");
					this.OnsurgeonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_institution_id", DbType="Int")]
		public System.Nullable<int> institution_id
		{
			get
			{
				return this._institution_id;
			}
			set
			{
				if ((this._institution_id != value))
				{
					if (this._Institution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oninstitution_idChanging(value);
					this.SendPropertyChanging();
					this._institution_id = value;
					this.SendPropertyChanged("institution_id");
					this.Oninstitution_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_online", DbType="Bit NOT NULL")]
		public bool online
		{
			get
			{
				return this._online;
			}
			set
			{
				if ((this._online != value))
				{
					this.OnonlineChanging(value);
					this.SendPropertyChanging();
					this._online = value;
					this.SendPropertyChanged("online");
					this.OnonlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Surgeon_Testimonial", Storage="_Testimonials", ThisKey="surgeonID", OtherKey="surgeonID")]
		public EntitySet<Testimonial> Testimonials
		{
			get
			{
				return this._Testimonials;
			}
			set
			{
				this._Testimonials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Surgeon_Patient", Storage="_Patients", ThisKey="surgeonID", OtherKey="surgeonID")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Institution_Surgeon", Storage="_Institution", ThisKey="institution_id", OtherKey="institution_id", IsForeignKey=true)]
		public Institution Institution
		{
			get
			{
				return this._Institution.Entity;
			}
			set
			{
				Institution previousValue = this._Institution.Entity;
				if (((previousValue != value) 
							|| (this._Institution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Institution.Entity = null;
						previousValue.Surgeons.Remove(this);
					}
					this._Institution.Entity = value;
					if ((value != null))
					{
						value.Surgeons.Add(this);
						this._institution_id = value.institution_id;
					}
					else
					{
						this._institution_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Institution");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Testimonials(Testimonial entity)
		{
			this.SendPropertyChanging();
			entity.Surgeon = this;
		}
		
		private void detach_Testimonials(Testimonial entity)
		{
			this.SendPropertyChanging();
			entity.Surgeon = null;
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Surgeon = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Surgeon = null;
		}
	}
}
#pragma warning restore 1591
